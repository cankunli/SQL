-------------Assignment 3--------------------------------------
/*
1.
Join is preferred because perforemce is high with join.

2.
A CTE allows you to define a temporary view in the execution scope of a statement such as SELECT, INSERT, UPDATE, DELETE, or MERGE.
When to use:
Break up complex queries such as complex joins and sub-queries
Substitute for a view, but doesn't require the overhead, metadata, or persistence of a formal view.
Recursive CTE - reference/join the samgit push -fe data set multiple times in the same statement.

3.
Table variable: a special type of the local variable that helps to store data temporarily, similar to the temp table in SQL Server.
It can be used within a Transact-SQL batch, stored procedure, or function.

Where are they created:
table variables are stored in the tempdb database

Scope :
The lifetime of the table variable only lasts for the duration of the batch, function, or stored procedure. 
As a result, the table variable in SQL Server is automatically dropped at the end of the batch.

--4.Delete will keep all deleted rows in log while truncate permenently delets records. Truncate will have more performence.

--5.Identity column is autogenerated column in a table. Identity column will will not get reset to initial value incase of delete but truncate will reset value to its initial value.

--6
/*The DELETE command is used to remove rows from a table. A WHERE clause can be used to only remove some rows. 
If no WHERE condition is specified, all rows will be removed. After performing a DELETE operation you need to COMMIT or 
ROLLBACK the transaction to make the change permanent or to undo it. Note that this operation will cause all DELETE triggers on the table to fire.*/
/*TRUNCATE removes all rows from a table. The operation cannot be rolled back and no triggers will be fired. As such, 
TRUCATE is faster and doesn't use as much undo space as a DELETE.*/


*/

--1
select distinct city from Customers where city in (select city from Employees)

--2a
select distinct city  from Customers 
where City not in (select distinct city from employees where city is not null)

--2b
select distinct city from Customers  
except 
select distinct city from Employees

---3
select ProductID,SUM(Quantity) as 'Total Orders' from [order details]
group by ProductID

--4
select city,sum(Quantity) as 'Total Orders' from orders o 
join [order details] od 
on o.orderid=od.orderid 
join customers c 
on c.customerid=o.CustomerID
group by city

--5a 
select city from Customers
except
select city from customers
group by city
having COUNT(*)=1
union 
select city from customers
group by city
having COUNT(*)=0

--5b
select distinct city from customers 
where city in (select City from customers 
group by city
having COUNT(*)>=2)

--6
select distinct city from orders o 
join [order details] od 
on o.orderid=od.orderid 
join customers c 
on c.customerid=o.CustomerID
group by city,ProductID
having COUNT(*)>=2

--7
select distinct c.CustomerID from orders o 
join [order details] od 
on o.orderid=od.orderid 
join customers c 
on c.customerid=o.CustomerID
where City != ShipCity

--8
select top 5 ProductID,AVG(UnitPrice) as AvgPrice,(select top 1 City from Customers c 
join Orders o 
on o.CustomerID=c.CustomerID 
join [Order Details] od2 
on od2.OrderID=o.OrderID 
where od2.ProductID=od1.ProductID 
group by city 
order by SUM(Quantity) desc) as City from [Order Details] od1
group by ProductID 
order by sum(Quantity) desc

--9a
select distinct City from Employees 
where city not in (select ShipCity from Orders where ShipCity is not null)

--9b
select distinct City from Employees 
where City is not null except (select ShipCity from Orders where ShipCity is not null)

--10
select (select top 1 City from Orders o join [Order Details] od on o.OrderID=od.OrderID join Employees e on e.EmployeeID = o.EmployeeID
group by e.EmployeeID,e.City
order by COUNT(*) desc) as MostOrderedCity,
(select top 1 City from Orders o join [Order Details] od on o.OrderID=od.OrderID join Employees e on e.EmployeeID = o.EmployeeID
group by e.EmployeeID,e.City
order by sum(Quantity) desc) as MostQunatitySoldCity

--11 use group by and count(*), if count(*)>1 then delete the rows using sub query

--12 select empid from Employee except select mgrid from Employee

--13 select deptid from employee group by deptid having count(*) = (select top 1 count(*) from employee group by deptid order by count(*) desc)

--14 select top 3 deptname,empid,salary from employee e join dep d on e.deptid=d.deptid order by salary,deptname,empid desc


